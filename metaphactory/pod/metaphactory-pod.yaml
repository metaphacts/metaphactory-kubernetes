apiVersion: v1
kind: Pod
metadata:
  labels:
    app: metaphactory
  name: metaphactory
spec:
  containers:
  - env:
    - name: JAVA_OPTS
      value: -Xmx1g
#    - name: BLAZEGRAPH_ENDPOINT
#      value: -Dconfig.environment.sparqlEndpoint=http://$(METAPHACTORY_BLAZEGRAPH_SERVICE_HOST):$(METAPHACTORY_BLAZEGRAPH_SERVICE_PORT)/blazegraph/sparql
    - name: EXTRA_ENV
      valueFrom:
        configMapKeyRef:
          name: metaphactory
          key: extra_env
          optional: true
    - name: PLATFORM_OPTS
      value: -Dlog4j.configurationFile=file:///var/lib/jetty/webapps/etc/log4j2.xml #$(BLAZEGRAPH_ENDPOINT) #$(EXTRA_ENV) 
    image: metaphacts/metaphactory:4.3.0
    name: metaphactory
    resources: {}
    volumeMounts:
    - mountPath: /runtime-data
      name: metaphactory-runtime-data
    - mountPath: /apps
      name: metaphactory-apps
    - mountPath: /storage
      name: metaphactory-storage
    ports:
    - containerPort: 8080
      protocol: TCP
  initContainers:
  - image: metaphacts/metaphactory:4.3.0
    name: metaphactory-config-init
    command: ["cp","-r","/runtime-data/.","/runtime-target/"]
    volumeMounts:
    - mountPath: /runtime-target
      name: metaphactory-runtime-data
  imagePullSecrets:
  - name: regcred
  restartPolicy: OnFailure
  volumes:
  - name: metaphactory-runtime-data
    persistentVolumeClaim:
      claimName: metaphactory-runtime-data
  - name: metaphactory-apps
    persistentVolumeClaim:
      claimName: metaphactory-apps
  - name: metaphactory-storage
    persistentVolumeClaim:
      claimName: metaphactory-storage
