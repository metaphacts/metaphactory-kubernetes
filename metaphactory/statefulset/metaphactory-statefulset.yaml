apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: metaphactory
  labels:
    app: metaphactory
spec:
  serviceName: "metaphactory"
  replicas: 1
  selector:
    matchLabels:
      app: metaphactory
  template:
    metadata:
      labels:
        app: metaphactory
    spec:
      terminationGracePeriodSeconds: 10
      securityContext:
        fsGroup: 101
      containers:
      - env:
        - name: PLATFORM_OPTS
          value: -Dlog4j.configurationFile=file:///var/lib/jetty/webapps/etc/log4j2.xml
        image: metaphacts/metaphactory:4.7.0
        name: metaphactory
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "1000m"
            memory: "2Gi"
        volumeMounts:
        - mountPath: /runtime-data
          name: metaphactory-runtime-data
        - mountPath: /apps
          name: metaphactory-apps
        - mountPath: /storage
          name: metaphactory-storage
        ports:
        - containerPort: 8080
          protocol: TCP
      initContainers:
      - image: metaphacts/metaphactory:4.7.0
        name: metaphactory-config-init
        command: ["cp","-r","-n","/runtime-data/.","/runtime-target/"]
        volumeMounts:
        - mountPath: /runtime-target
          name: metaphactory-runtime-data
      imagePullSecrets:
      - name: regcred
  volumeClaimTemplates:
  - metadata:
      name: metaphactory-runtime-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
 #     storageClassName: "my-storage-class"
      resources:
        requests:
          storage: 100Mi
  - metadata:
      name: metaphactory-apps
    spec:
      accessModes: [ "ReadWriteOnce" ]
 #     storageClassName: "my-storage-class"
      resources:
        requests:
          storage: 100Mi
  - metadata:
      name: metaphactory-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
 #     storageClassName: "my-storage-class"
      resources:
        requests:
          storage: 100Mi
